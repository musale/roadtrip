# RoadTrip Migration Guide: Vanilla JS → React + Vite + TailwindCSS

## How to Use This Guide

- [x] **Progress Tracking**: Check off items as you complete them using `- [x]`
- [x] **Sequential Order**: Follow phases in order, but items within a phase can be done in parallel
- [x] **Sub-tasks**: Complete all sub-items before marking the parent item as done
- [x] **Testing**: Test each component as you build it before moving to the next
- [x] **Commits**: Make frequent commits after completing each major item
- [x] **Branches**: Consider creating feature branches for each phase
- [x] **Rollback**: Keep the original `src/` directory until migration is complete

---

## Phase 1: Project Setup & Build System ✅ COMPLETED

### Initial Setup

- [x] Initialize new Vite + React project structure
  - [x] Run `npm create vite@latest roadtrip-react -- --template react`
  - [x] Move new project files to root or create parallel structure
  - [x] Update `.gitignore` for Node.js/React project

### Dependencies Installation

- [x] Install core dependencies
  - [x] `npm install react react-dom`
  - [x] `npm install maplibre-gl`
  - [x] `npm install -D @vitejs/plugin-react`
  - [x] `npm install -D vite`

### TailwindCSS Setup

- [x] Install and configure TailwindCSS
  - [x] `npm install -D tailwindcss postcss autoprefixer`
  - [x] `npm install @tailwindcss/postcss` (v4 requirement)
  - [x] `npx tailwindcss init -p`
  - [x] Configure `tailwind.config.js` with custom theme
  - [x] Add Tailwind directives to CSS entry point
  - [x] Test Tailwind classes are working

### PWA Configuration

- [x] Install and configure PWA plugin
  - [x] `npm install -D vite-plugin-pwa`
  - [x] Configure `vite.config.js` with PWA settings
  - [x] Create/copy PWA manifest and icons
  - [x] Test PWA installation works

### Development Environment

- [x] Configure development server
  - [x] Set up proper HTTPS for geolocation testing
  - [x] Configure mobile device testing
  - [x] Test hot module replacement works

**Phase 1 Status**: ✅ **COMPLETE** - Build system working, TailwindCSS integrated, PWA configured, demo app renders successfully

---

## Phase 2: Core Data Layer Migration ✅ COMPLETED

### TripRecorder Hook

- [x] Create `src/hooks/useTripRecorder.js`
  - [x] Convert TripRecorder class to React hook
  - [x] Implement trip start/stop functionality
  - [x] Add GPS coordinate collection logic
  - [x] Include distance calculation (Haversine formula)
  - [x] Add speed calculation with smoothing
  - [x] Implement trip statistics calculation
  - [x] Test hook with mock GPS data

### Geolocation Hook

- [x] Create `src/hooks/useGeolocation.js`
  - [x] Wrap navigator.geolocation API
  - [x] Handle permission requests
  - [x] Implement error handling
  - [x] Add accuracy filtering (>50m rejection)
  - [x] Test with real device GPS

### Local Storage Hook

- [x] Create `src/hooks/useLocalStorage.js`
  - [x] Implement trip data persistence
  - [x] Add trip history management
  - [x] Include data export utilities (GPX/GeoJSON)
  - [x] Test data persistence across sessions

### Wake Lock Hook

- [x] Create `src/hooks/useWakeLock.js`
  - [x] Implement screen wake lock during recording
  - [x] Handle wake lock release on trip stop
  - [x] Add error handling for unsupported browsers
  - [x] Test wake lock functionality

### Neon Velocity Design System Integration

- [x] Update `tailwind.config.js` with Neon Velocity tokens
  - [x] Add color primitives and semantic tokens
  - [x] Configure custom animations (glowPulse, shimmer, glitchIn)
  - [x] Add timing function and duration tokens
  - [x] Include hocus and reduced-motion variants

- [x] Update `src/index.css` with design system
  - [x] Add CSS custom properties for all tokens
  - [x] Implement neon border utilities (.nv-neon, .nv-neon-strong)
  - [x] Update button styles with neon theming
  - [x] Add focus-visible ring with brand colors
  - [x] Configure reduced motion support

**Phase 2 Status**: ✅ **COMPLETE** - Core data layer hooks implemented, GPS tracking working, localStorage persistence functional, Neon Velocity design system integrated

---

## Phase 3: Core Components ✅ COMPLETED

### App Container

- [x] Create `src/App.jsx`
  - [x] Set up main application structure
  - [x] Implement mode switching logic (camera/map)
  - [x] Add global state management context
  - [x] Test basic app renders and mode switching works

### Context Provider

- [x] Create `src/context/AppContext.jsx`
  - [x] Define global state structure
  - [x] Implement context provider
  - [x] Add state update functions
  - [x] Test context provides state to components

### LiveHUD Component

- [x] Create `src/components/LiveHUD.jsx`
  - [x] Convert canvas-based HUD to React component
  - [x] Implement high-DPI canvas setup
  - [x] Add 60fps animation loop with useEffect
  - [x] Include real-time statistics rendering
  - [x] Add accessibility attributes
  - [x] Test HUD renders stats correctly

### MapView Component

- [x] Create `src/components/MapView.jsx`
  - [x] Integrate MapLibre GL with React
  - [x] Implement map initialization
  - [x] Add real-time track rendering
  - [x] Include current position marker
  - [x] Add follow mode functionality
  - [x] Implement fit-to-bounds feature
  - [x] Add canvas fallback for offline mode
  - [x] Test map renders and updates with GPS data

### CameraView Component

- [x] Create `src/components/CameraView.jsx`
  - [x] Implement camera feed access
  - [x] Add camera permission handling
  - [x] Include fallback for no camera
  - [x] Test camera feed displays correctly

**Phase 3 Status**: ✅ **COMPLETE** - All core components implemented with context provider, canvas-based HUD, MapLibre GL integration, camera access, and full React architecture

---

## Phase 4: UI Components

### StatusBar Component

- [ ] Create `src/components/StatusBar.jsx`
  - [ ] Implement recording status indicator
  - [ ] Add GPS status display
  - [ ] Include storage indicator
  - [ ] Add mode indicator badge
  - [ ] Style with TailwindCSS
  - [ ] Test all status indicators work

### ControlBar Component

- [ ] Create `src/components/ControlBar.jsx`
  - [ ] Create record start/stop button
  - [ ] Add mode toggle button
  - [ ] Include fit button (map mode only)
  - [ ] Add settings button
  - [ ] Style with TailwindCSS
  - [ ] Test all controls function correctly

### Button Components

- [ ] Create reusable button components
  - [ ] `src/components/ui/Button.jsx` - Base button
  - [ ] `src/components/ui/IconButton.jsx` - Icon button
  - [ ] Add proper touch targets (44px minimum)
  - [ ] Include loading and disabled states
  - [ ] Style with TailwindCSS variants

---

## Phase 5: Styling Migration

### TailwindCSS Theme Configuration

- [x] Update `tailwind.config.js`
  - [x] Add custom colors (recording red, primary blue, etc.)
  - [x] Configure custom spacing and sizes
  - [x] Add mobile-first breakpoints
  - [x] Define custom animations
  - [x] Add dynamic viewport height utilities

### Component Styling

- [ ] Convert CSS classes to TailwindCSS
  - [ ] App layout and positioning
  - [ ] Background layer styling
  - [ ] HUD overlay styling
  - [ ] Control layer styling
  - [ ] Button states and interactions
  - [ ] Responsive design breakpoints

### Mode-Specific Styling

- [ ] Implement mode-based styling
  - [ ] Camera mode layout
  - [ ] Map mode layout
  - [ ] Mode transition animations
  - [ ] Hidden/visible element toggles
	- [ ] 
### Neon style

- [ ] Update to the neon.md file styles
- [ ] Inspri

---

## Phase 6: Integration & State Management

### Component Integration

- [ ] Connect all components in App.jsx
  - [ ] Wire up TripRecorder hook to UI
  - [ ] Connect LiveHUD to trip statistics
  - [ ] Link MapView to GPS coordinates
  - [ ] Connect ControlBar to recording actions

### Event Flow Setup

- [ ] Implement proper data flow
  - [ ] GPS data → TripRecorder → UI updates
  - [ ] Control actions → State updates → UI feedback
  - [ ] Mode switching → Component visibility
  - [ ] Recording state → All component updates

### Error Handling

- [ ] Add comprehensive error handling
  - [ ] GPS/location errors
  - [ ] Camera access errors
  - [ ] Map loading errors
  - [ ] Storage errors
  - [ ] Network errors for map tiles

---

## Phase 7: Testing & Quality Assurance

### Unit Testing Setup

- [ ] Configure testing framework
  - [ ] Install Vitest and React Testing Library
  - [ ] Configure test environment
  - [ ] Set up mock utilities

### Component Testing

- [ ] Write tests for core components
  - [ ] TripRecorder hook tests
  - [ ] LiveHUD component tests
  - [ ] MapView component tests
  - [ ] UI component tests

### Integration Testing

- [ ] Test complete user flows
  - [ ] Start/stop recording flow
  - [ ] Mode switching flow
  - [ ] GPS data collection flow
  - [ ] Export functionality flow

### Mobile Testing

- [ ] Test on actual mobile devices
  - [ ] GPS functionality
  - [ ] Touch interactions
  - [ ] Performance on mobile
  - [ ] PWA installation
  - [ ] Offline functionality

---

## Phase 8: Performance Optimization

### Bundle Optimization

- [ ] Optimize build output
  - [ ] Configure code splitting
  - [ ] Optimize asset loading
  - [ ] Minimize bundle size
  - [ ] Test build performance

### Runtime Optimization

- [ ] Optimize component performance
  - [ ] Add React.memo where appropriate
  - [ ] Optimize re-render patterns
  - [ ] Minimize canvas redraws
  - [ ] Optimize map rendering

### Mobile Performance

- [ ] Optimize for mobile devices
  - [ ] Battery usage optimization
  - [ ] Memory usage optimization
  - [ ] GPS polling optimization
  - [ ] Smooth 60fps animations

---

## Phase 9: PWA Features & Deployment

### PWA Completion

- [ ] Finalize PWA setup
  - [ ] Test offline functionality
  - [ ] Verify service worker registration
  - [ ] Test PWA installation flow
  - [ ] Validate manifest configuration

### Data Migration

- [ ] Handle existing user data
  - [ ] Migrate localStorage trip data
  - [ ] Preserve user settings
  - [ ] Test data backward compatibility

### Deployment Preparation

- [ ] Prepare for deployment
  - [ ] Configure build scripts
  - [ ] Set up environment variables
  - [ ] Optimize production build
  - [ ] Test production build locally

---

## Phase 10: Final Testing & Documentation

### Comprehensive Testing

- [ ] Final end-to-end testing
  - [ ] All user flows work correctly
  - [ ] GPS recording accuracy
  - [ ] Export functionality works
  - [ ] Cross-browser compatibility
  - [ ] Mobile device compatibility

### Documentation Updates

- [ ] Update project documentation
  - [ ] Update README.md for React project
  - [ ] Document new component architecture
  - [ ] Update build and deployment instructions
  - [ ] Document migration changes

### Cleanup

- [ ] Clean up migration artifacts
  - [ ] Remove old vanilla JS files
  - [ ] Clean up unused dependencies
  - [ ] Remove migration-specific code
  - [ ] Final code review and cleanup

---

## Migration Complete ✅

- [ ] **All phases completed**
- [ ] **Original functionality preserved**
- [ ] **New React architecture implemented**
- [ ] **TailwindCSS styling applied**
- [ ] **PWA features working**
- [ ] **Performance optimized**
- [ ] **Documentation updated**

---

## Notes Section

Use this space to track issues, decisions, and important notes during migration:

```
[Date] - [Note]
Oct 3, 2025 - Phase 2 completed: All core data layer hooks implemented with full GPS tracking, localStorage persistence, and Neon Velocity design system integration
```

---

## Rollback Plan

If migration needs to be rolled back:

1. Keep original `src/` directory until migration is complete
2. Maintain original build process until new one is verified
3. Test both versions in parallel during migration
4. Have deployment rollback strategy ready
